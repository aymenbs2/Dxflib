### YamlMime:ManagedReference
items:
- uid: Dxflib.AcadEntities.Layer
  commentId: T:Dxflib.AcadEntities.Layer
  id: Layer
  parent: Dxflib.AcadEntities
  children:
  - Dxflib.AcadEntities.Layer.#ctor(System.String)
  - Dxflib.AcadEntities.Layer.AddEntity(System.String,Dxflib.Entities.Entity)
  - Dxflib.AcadEntities.Layer.ContainsEntity(System.String)
  - Dxflib.AcadEntities.Layer.Count
  - Dxflib.AcadEntities.Layer.GetAllEntities
  - Dxflib.AcadEntities.Layer.GetAllHandles
  - Dxflib.AcadEntities.Layer.GetEntity(System.String)
  - Dxflib.AcadEntities.Layer.Name
  - Dxflib.AcadEntities.Layer.RemoveEntity(System.String)
  langs:
  - csharp
  - vb
  name: Layer
  nameWithType: Layer
  fullName: Dxflib.AcadEntities.Layer
  type: Class
  source:
    remote:
      path: Dxflib/AcadEntities/Layer.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: Layer
    path: AcadEntities/Layer.cs
    startLine: 21
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nThe Layer Class\n"
  example: []
  syntax:
    content: public class Layer
    content.vb: Public Class Layer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dxflib.AcadEntities.Layer.#ctor(System.String)
  commentId: M:Dxflib.AcadEntities.Layer.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Dxflib.AcadEntities.Layer
  langs:
  - csharp
  - vb
  name: Layer(String)
  nameWithType: Layer.Layer(String)
  fullName: Dxflib.AcadEntities.Layer.Layer(System.String)
  type: Constructor
  source:
    remote:
      path: Dxflib/AcadEntities/Layer.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: .ctor
    path: AcadEntities/Layer.cs
    startLine: 31
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nLayer Constructor\n"
  example: []
  syntax:
    content: public Layer(string name)
    parameters:
    - id: name
      type: System.String
      description: The Layer Name
    content.vb: Public Sub New(name As String)
  overload: Dxflib.AcadEntities.Layer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.AcadEntities.Layer.Name
  commentId: P:Dxflib.AcadEntities.Layer.Name
  id: Name
  parent: Dxflib.AcadEntities.Layer
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Layer.Name
  fullName: Dxflib.AcadEntities.Layer.Name
  type: Property
  source:
    remote:
      path: Dxflib/AcadEntities/Layer.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: Name
    path: AcadEntities/Layer.cs
    startLine: 40
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nThe Layer&apos;s Name\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Dxflib.AcadEntities.Layer.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dxflib.AcadEntities.Layer.Count
  commentId: P:Dxflib.AcadEntities.Layer.Count
  id: Count
  parent: Dxflib.AcadEntities.Layer
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: Layer.Count
  fullName: Dxflib.AcadEntities.Layer.Count
  type: Property
  source:
    remote:
      path: Dxflib/AcadEntities/Layer.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: Count
    path: AcadEntities/Layer.cs
    startLine: 45
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nThe Number of layers in the dictionary\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Dxflib.AcadEntities.Layer.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dxflib.AcadEntities.Layer.ContainsEntity(System.String)
  commentId: M:Dxflib.AcadEntities.Layer.ContainsEntity(System.String)
  id: ContainsEntity(System.String)
  parent: Dxflib.AcadEntities.Layer
  langs:
  - csharp
  - vb
  name: ContainsEntity(String)
  nameWithType: Layer.ContainsEntity(String)
  fullName: Dxflib.AcadEntities.Layer.ContainsEntity(System.String)
  type: Method
  source:
    remote:
      path: Dxflib/AcadEntities/Layer.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: ContainsEntity
    path: AcadEntities/Layer.cs
    startLine: 56
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nReturns true if the layer contains the entity\nwith the provided handle\n"
  example: []
  syntax:
    content: public bool ContainsEntity(string handle)
    parameters:
    - id: handle
      type: System.String
      description: Handle of the entity
    return:
      type: System.Boolean
      description: "\nTrue: The entity is contained, False: the entity is not\ncontained\n"
    content.vb: Public Function ContainsEntity(handle As String) As Boolean
  overload: Dxflib.AcadEntities.Layer.ContainsEntity*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.AcadEntities.Layer.AddEntity(System.String,Dxflib.Entities.Entity)
  commentId: M:Dxflib.AcadEntities.Layer.AddEntity(System.String,Dxflib.Entities.Entity)
  id: AddEntity(System.String,Dxflib.Entities.Entity)
  parent: Dxflib.AcadEntities.Layer
  langs:
  - csharp
  - vb
  name: AddEntity(String, Entity)
  nameWithType: Layer.AddEntity(String, Entity)
  fullName: Dxflib.AcadEntities.Layer.AddEntity(System.String, Dxflib.Entities.Entity)
  type: Method
  source:
    remote:
      path: Dxflib/AcadEntities/Layer.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: AddEntity
    path: AcadEntities/Layer.cs
    startLine: 66
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nAdds an entity to the dictionary\n"
  example: []
  syntax:
    content: public void AddEntity(string handle, Entity entity)
    parameters:
    - id: handle
      type: System.String
      description: The entity&apos;s handle
    - id: entity
      type: Dxflib.Entities.Entity
      description: The entity reference
    content.vb: Public Sub AddEntity(handle As String, entity As Entity)
  overload: Dxflib.AcadEntities.Layer.AddEntity*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.AcadEntities.Layer.RemoveEntity(System.String)
  commentId: M:Dxflib.AcadEntities.Layer.RemoveEntity(System.String)
  id: RemoveEntity(System.String)
  parent: Dxflib.AcadEntities.Layer
  langs:
  - csharp
  - vb
  name: RemoveEntity(String)
  nameWithType: Layer.RemoveEntity(String)
  fullName: Dxflib.AcadEntities.Layer.RemoveEntity(System.String)
  type: Method
  source:
    remote:
      path: Dxflib/AcadEntities/Layer.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: RemoveEntity
    path: AcadEntities/Layer.cs
    startLine: 78
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nRemoves the entity from the dictionary\n"
  example: []
  syntax:
    content: public void RemoveEntity(string handle)
    parameters:
    - id: handle
      type: System.String
      description: ''
    content.vb: Public Sub RemoveEntity(handle As String)
  overload: Dxflib.AcadEntities.Layer.RemoveEntity*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.AcadEntities.Layer.GetAllEntities
  commentId: M:Dxflib.AcadEntities.Layer.GetAllEntities
  id: GetAllEntities
  parent: Dxflib.AcadEntities.Layer
  langs:
  - csharp
  - vb
  name: GetAllEntities()
  nameWithType: Layer.GetAllEntities()
  fullName: Dxflib.AcadEntities.Layer.GetAllEntities()
  type: Method
  source:
    remote:
      path: Dxflib/AcadEntities/Layer.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: GetAllEntities
    path: AcadEntities/Layer.cs
    startLine: 90
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nGet all of the entities on the layer\n"
  example: []
  syntax:
    content: public List<Entity> GetAllEntities()
    return:
      type: System.Collections.Generic.List{Dxflib.Entities.Entity}
      description: a list of all of the entities on the layer
    content.vb: Public Function GetAllEntities As List(Of Entity)
  overload: Dxflib.AcadEntities.Layer.GetAllEntities*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.AcadEntities.Layer.GetAllHandles
  commentId: M:Dxflib.AcadEntities.Layer.GetAllHandles
  id: GetAllHandles
  parent: Dxflib.AcadEntities.Layer
  langs:
  - csharp
  - vb
  name: GetAllHandles()
  nameWithType: Layer.GetAllHandles()
  fullName: Dxflib.AcadEntities.Layer.GetAllHandles()
  type: Method
  source:
    remote:
      path: Dxflib/AcadEntities/Layer.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: GetAllHandles
    path: AcadEntities/Layer.cs
    startLine: 99
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nGets all of the handles from the dictionary\n"
  example: []
  syntax:
    content: public List<string> GetAllHandles()
    return:
      type: System.Collections.Generic.List{System.String}
      description: A list of handles
    content.vb: Public Function GetAllHandles As List(Of String)
  overload: Dxflib.AcadEntities.Layer.GetAllHandles*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.AcadEntities.Layer.GetEntity(System.String)
  commentId: M:Dxflib.AcadEntities.Layer.GetEntity(System.String)
  id: GetEntity(System.String)
  parent: Dxflib.AcadEntities.Layer
  langs:
  - csharp
  - vb
  name: GetEntity(String)
  nameWithType: Layer.GetEntity(String)
  fullName: Dxflib.AcadEntities.Layer.GetEntity(System.String)
  type: Method
  source:
    remote:
      path: Dxflib/AcadEntities/Layer.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: GetEntity
    path: AcadEntities/Layer.cs
    startLine: 109
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nGets a layer from it&apos;s handle\n"
  example: []
  syntax:
    content: public Entity GetEntity(string handle)
    parameters:
    - id: handle
      type: System.String
      description: The handle of the entity
    return:
      type: Dxflib.Entities.Entity
      description: The entity
    content.vb: Public Function GetEntity(handle As String) As Entity
  overload: Dxflib.AcadEntities.Layer.GetEntity*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Dxflib.AcadEntities
  commentId: N:Dxflib.AcadEntities
  name: Dxflib.AcadEntities
  nameWithType: Dxflib.AcadEntities
  fullName: Dxflib.AcadEntities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dxflib.AcadEntities.Layer.#ctor*
  commentId: Overload:Dxflib.AcadEntities.Layer.#ctor
  name: Layer
  nameWithType: Layer.Layer
  fullName: Dxflib.AcadEntities.Layer.Layer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Dxflib.AcadEntities.Layer.Name*
  commentId: Overload:Dxflib.AcadEntities.Layer.Name
  name: Name
  nameWithType: Layer.Name
  fullName: Dxflib.AcadEntities.Layer.Name
- uid: Dxflib.AcadEntities.Layer.Count*
  commentId: Overload:Dxflib.AcadEntities.Layer.Count
  name: Count
  nameWithType: Layer.Count
  fullName: Dxflib.AcadEntities.Layer.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Dxflib.AcadEntities.Layer.ContainsEntity*
  commentId: Overload:Dxflib.AcadEntities.Layer.ContainsEntity
  name: ContainsEntity
  nameWithType: Layer.ContainsEntity
  fullName: Dxflib.AcadEntities.Layer.ContainsEntity
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Dxflib.AcadEntities.Layer.AddEntity*
  commentId: Overload:Dxflib.AcadEntities.Layer.AddEntity
  name: AddEntity
  nameWithType: Layer.AddEntity
  fullName: Dxflib.AcadEntities.Layer.AddEntity
- uid: Dxflib.Entities.Entity
  commentId: T:Dxflib.Entities.Entity
  parent: Dxflib.Entities
  name: Entity
  nameWithType: Entity
  fullName: Dxflib.Entities.Entity
- uid: Dxflib.Entities
  commentId: N:Dxflib.Entities
  name: Dxflib.Entities
  nameWithType: Dxflib.Entities
  fullName: Dxflib.Entities
- uid: Dxflib.AcadEntities.Layer.RemoveEntity*
  commentId: Overload:Dxflib.AcadEntities.Layer.RemoveEntity
  name: RemoveEntity
  nameWithType: Layer.RemoveEntity
  fullName: Dxflib.AcadEntities.Layer.RemoveEntity
- uid: Dxflib.AcadEntities.Layer.GetAllEntities*
  commentId: Overload:Dxflib.AcadEntities.Layer.GetAllEntities
  name: GetAllEntities
  nameWithType: Layer.GetAllEntities
  fullName: Dxflib.AcadEntities.Layer.GetAllEntities
- uid: System.Collections.Generic.List{Dxflib.Entities.Entity}
  commentId: T:System.Collections.Generic.List{Dxflib.Entities.Entity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Entity>
  nameWithType: List<Entity>
  fullName: System.Collections.Generic.List<Dxflib.Entities.Entity>
  nameWithType.vb: List(Of Entity)
  fullName.vb: System.Collections.Generic.List(Of Dxflib.Entities.Entity)
  name.vb: List(Of Entity)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dxflib.Entities.Entity
    name: Entity
    nameWithType: Entity
    fullName: Dxflib.Entities.Entity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dxflib.Entities.Entity
    name: Entity
    nameWithType: Entity
    fullName: Dxflib.Entities.Entity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Dxflib.AcadEntities.Layer.GetAllHandles*
  commentId: Overload:Dxflib.AcadEntities.Layer.GetAllHandles
  name: GetAllHandles
  nameWithType: Layer.GetAllHandles
  fullName: Dxflib.AcadEntities.Layer.GetAllHandles
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dxflib.AcadEntities.Layer.GetEntity*
  commentId: Overload:Dxflib.AcadEntities.Layer.GetEntity
  name: GetEntity
  nameWithType: Layer.GetEntity
  fullName: Dxflib.AcadEntities.Layer.GetEntity
