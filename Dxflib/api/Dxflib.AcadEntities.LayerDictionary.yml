### YamlMime:ManagedReference
items:
- uid: Dxflib.AcadEntities.LayerDictionary
  commentId: T:Dxflib.AcadEntities.LayerDictionary
  id: LayerDictionary
  parent: Dxflib.AcadEntities
  children:
  - Dxflib.AcadEntities.LayerDictionary.#ctor
  - Dxflib.AcadEntities.LayerDictionary.ContainsLayer(System.String)
  - Dxflib.AcadEntities.LayerDictionary.Count
  - Dxflib.AcadEntities.LayerDictionary.GetAllLayers
  - Dxflib.AcadEntities.LayerDictionary.GetLayer(System.String)
  - Dxflib.AcadEntities.LayerDictionary.NewLayer(System.String)
  - Dxflib.AcadEntities.LayerDictionary.RemoveLayer(System.String)
  - Dxflib.AcadEntities.LayerDictionary.UpdateDictionary(System.Collections.Generic.IEnumerable{Dxflib.Entities.Entity})
  langs:
  - csharp
  - vb
  name: LayerDictionary
  nameWithType: LayerDictionary
  fullName: Dxflib.AcadEntities.LayerDictionary
  type: Class
  source:
    remote:
      path: Dxflib/AcadEntities/LayerDictionary.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: LayerDictionary
    path: AcadEntities/LayerDictionary.cs
    startLine: 21
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nA class that holds layer using a dictionary structure\n"
  example: []
  syntax:
    content: public class LayerDictionary
    content.vb: Public Class LayerDictionary
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dxflib.AcadEntities.LayerDictionary.#ctor
  commentId: M:Dxflib.AcadEntities.LayerDictionary.#ctor
  id: '#ctor'
  parent: Dxflib.AcadEntities.LayerDictionary
  langs:
  - csharp
  - vb
  name: LayerDictionary()
  nameWithType: LayerDictionary.LayerDictionary()
  fullName: Dxflib.AcadEntities.LayerDictionary.LayerDictionary()
  type: Constructor
  source:
    remote:
      path: Dxflib/AcadEntities/LayerDictionary.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: .ctor
    path: AcadEntities/LayerDictionary.cs
    startLine: 29
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nConstructor that initalizes that LayerDictionary\n"
  example: []
  syntax:
    content: public LayerDictionary()
    content.vb: Public Sub New
  overload: Dxflib.AcadEntities.LayerDictionary.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.AcadEntities.LayerDictionary.Count
  commentId: P:Dxflib.AcadEntities.LayerDictionary.Count
  id: Count
  parent: Dxflib.AcadEntities.LayerDictionary
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: LayerDictionary.Count
  fullName: Dxflib.AcadEntities.LayerDictionary.Count
  type: Property
  source:
    remote:
      path: Dxflib/AcadEntities/LayerDictionary.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: Count
    path: AcadEntities/LayerDictionary.cs
    startLine: 37
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nCount from the dictionary base\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Dxflib.AcadEntities.LayerDictionary.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dxflib.AcadEntities.LayerDictionary.GetAllLayers
  commentId: P:Dxflib.AcadEntities.LayerDictionary.GetAllLayers
  id: GetAllLayers
  parent: Dxflib.AcadEntities.LayerDictionary
  langs:
  - csharp
  - vb
  name: GetAllLayers
  nameWithType: LayerDictionary.GetAllLayers
  fullName: Dxflib.AcadEntities.LayerDictionary.GetAllLayers
  type: Property
  source:
    remote:
      path: Dxflib/AcadEntities/LayerDictionary.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: GetAllLayers
    path: AcadEntities/LayerDictionary.cs
    startLine: 42
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nReturns all layers\n"
  example: []
  syntax:
    content: public List<Layer> GetAllLayers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Dxflib.AcadEntities.Layer}
    content.vb: Public ReadOnly Property GetAllLayers As List(Of Layer)
  overload: Dxflib.AcadEntities.LayerDictionary.GetAllLayers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dxflib.AcadEntities.LayerDictionary.NewLayer(System.String)
  commentId: M:Dxflib.AcadEntities.LayerDictionary.NewLayer(System.String)
  id: NewLayer(System.String)
  parent: Dxflib.AcadEntities.LayerDictionary
  langs:
  - csharp
  - vb
  name: NewLayer(String)
  nameWithType: LayerDictionary.NewLayer(String)
  fullName: Dxflib.AcadEntities.LayerDictionary.NewLayer(System.String)
  type: Method
  source:
    remote:
      path: Dxflib/AcadEntities/LayerDictionary.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: NewLayer
    path: AcadEntities/LayerDictionary.cs
    startLine: 48
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nAdding a new layer to the dictionary\n"
  example: []
  syntax:
    content: public void NewLayer(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the layer
    content.vb: Public Sub NewLayer(name As String)
  overload: Dxflib.AcadEntities.LayerDictionary.NewLayer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.AcadEntities.LayerDictionary.ContainsLayer(System.String)
  commentId: M:Dxflib.AcadEntities.LayerDictionary.ContainsLayer(System.String)
  id: ContainsLayer(System.String)
  parent: Dxflib.AcadEntities.LayerDictionary
  langs:
  - csharp
  - vb
  name: ContainsLayer(String)
  nameWithType: LayerDictionary.ContainsLayer(String)
  fullName: Dxflib.AcadEntities.LayerDictionary.ContainsLayer(System.String)
  type: Method
  source:
    remote:
      path: Dxflib/AcadEntities/LayerDictionary.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: ContainsLayer
    path: AcadEntities/LayerDictionary.cs
    startLine: 61
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nReturns true or false if the layer is in this dictionary\n"
  example: []
  syntax:
    content: public bool ContainsLayer(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the layer you want to search
    return:
      type: System.Boolean
      description: 'True: If the layer does exits, False: If the layer does not exist'
    content.vb: Public Function ContainsLayer(name As String) As Boolean
  overload: Dxflib.AcadEntities.LayerDictionary.ContainsLayer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.AcadEntities.LayerDictionary.GetLayer(System.String)
  commentId: M:Dxflib.AcadEntities.LayerDictionary.GetLayer(System.String)
  id: GetLayer(System.String)
  parent: Dxflib.AcadEntities.LayerDictionary
  langs:
  - csharp
  - vb
  name: GetLayer(String)
  nameWithType: LayerDictionary.GetLayer(String)
  fullName: Dxflib.AcadEntities.LayerDictionary.GetLayer(System.String)
  type: Method
  source:
    remote:
      path: Dxflib/AcadEntities/LayerDictionary.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: GetLayer
    path: AcadEntities/LayerDictionary.cs
    startLine: 71
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nGet a layer from the dictionary\n"
  example: []
  syntax:
    content: public Layer GetLayer(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the layer
    return:
      type: Dxflib.AcadEntities.Layer
      description: The layer that coresponds with the name that was given
    content.vb: Public Function GetLayer(name As String) As Layer
  overload: Dxflib.AcadEntities.LayerDictionary.GetLayer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.AcadEntities.LayerDictionary.UpdateDictionary(System.Collections.Generic.IEnumerable{Dxflib.Entities.Entity})
  commentId: M:Dxflib.AcadEntities.LayerDictionary.UpdateDictionary(System.Collections.Generic.IEnumerable{Dxflib.Entities.Entity})
  id: UpdateDictionary(System.Collections.Generic.IEnumerable{Dxflib.Entities.Entity})
  parent: Dxflib.AcadEntities.LayerDictionary
  langs:
  - csharp
  - vb
  name: UpdateDictionary(IEnumerable<Entity>)
  nameWithType: LayerDictionary.UpdateDictionary(IEnumerable<Entity>)
  fullName: Dxflib.AcadEntities.LayerDictionary.UpdateDictionary(System.Collections.Generic.IEnumerable<Dxflib.Entities.Entity>)
  type: Method
  source:
    remote:
      path: Dxflib/AcadEntities/LayerDictionary.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: UpdateDictionary
    path: AcadEntities/LayerDictionary.cs
    startLine: 85
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nUpdates the dictionary.\nIf a layer does not exist then it adds it to the dictionary and\nadds entities to their respective layers\n"
  example: []
  syntax:
    content: public void UpdateDictionary(IEnumerable<Entity> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{Dxflib.Entities.Entity}
      description: Entities that you want the dictionary to have
    content.vb: Public Sub UpdateDictionary(entities As IEnumerable(Of Entity))
  overload: Dxflib.AcadEntities.LayerDictionary.UpdateDictionary*
  nameWithType.vb: LayerDictionary.UpdateDictionary(IEnumerable(Of Entity))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dxflib.AcadEntities.LayerDictionary.UpdateDictionary(System.Collections.Generic.IEnumerable(Of Dxflib.Entities.Entity))
  name.vb: UpdateDictionary(IEnumerable(Of Entity))
- uid: Dxflib.AcadEntities.LayerDictionary.RemoveLayer(System.String)
  commentId: M:Dxflib.AcadEntities.LayerDictionary.RemoveLayer(System.String)
  id: RemoveLayer(System.String)
  parent: Dxflib.AcadEntities.LayerDictionary
  langs:
  - csharp
  - vb
  name: RemoveLayer(String)
  nameWithType: LayerDictionary.RemoveLayer(String)
  fullName: Dxflib.AcadEntities.LayerDictionary.RemoveLayer(System.String)
  type: Method
  source:
    remote:
      path: Dxflib/AcadEntities/LayerDictionary.cs
      branch: master
      repo: https://github.com/rena0157/Dxflib.git
    id: RemoveLayer
    path: AcadEntities/LayerDictionary.cs
    startLine: 138
  assemblies:
  - Dxflib
  namespace: Dxflib.AcadEntities
  summary: "\nRemove a layer\n"
  example: []
  syntax:
    content: public bool RemoveLayer(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the layer that is to be removed
    return:
      type: System.Boolean
      description: 'True: if Sucessful'
    content.vb: Public Function RemoveLayer(name As String) As Boolean
  overload: Dxflib.AcadEntities.LayerDictionary.RemoveLayer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Dxflib.AcadEntities
  commentId: N:Dxflib.AcadEntities
  name: Dxflib.AcadEntities
  nameWithType: Dxflib.AcadEntities
  fullName: Dxflib.AcadEntities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dxflib.AcadEntities.LayerDictionary.#ctor*
  commentId: Overload:Dxflib.AcadEntities.LayerDictionary.#ctor
  name: LayerDictionary
  nameWithType: LayerDictionary.LayerDictionary
  fullName: Dxflib.AcadEntities.LayerDictionary.LayerDictionary
- uid: Dxflib.AcadEntities.LayerDictionary.Count*
  commentId: Overload:Dxflib.AcadEntities.LayerDictionary.Count
  name: Count
  nameWithType: LayerDictionary.Count
  fullName: Dxflib.AcadEntities.LayerDictionary.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Dxflib.AcadEntities.LayerDictionary.GetAllLayers*
  commentId: Overload:Dxflib.AcadEntities.LayerDictionary.GetAllLayers
  name: GetAllLayers
  nameWithType: LayerDictionary.GetAllLayers
  fullName: Dxflib.AcadEntities.LayerDictionary.GetAllLayers
- uid: System.Collections.Generic.List{Dxflib.AcadEntities.Layer}
  commentId: T:System.Collections.Generic.List{Dxflib.AcadEntities.Layer}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Layer>
  nameWithType: List<Layer>
  fullName: System.Collections.Generic.List<Dxflib.AcadEntities.Layer>
  nameWithType.vb: List(Of Layer)
  fullName.vb: System.Collections.Generic.List(Of Dxflib.AcadEntities.Layer)
  name.vb: List(Of Layer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dxflib.AcadEntities.Layer
    name: Layer
    nameWithType: Layer
    fullName: Dxflib.AcadEntities.Layer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dxflib.AcadEntities.Layer
    name: Layer
    nameWithType: Layer
    fullName: Dxflib.AcadEntities.Layer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Dxflib.AcadEntities.LayerDictionary.NewLayer*
  commentId: Overload:Dxflib.AcadEntities.LayerDictionary.NewLayer
  name: NewLayer
  nameWithType: LayerDictionary.NewLayer
  fullName: Dxflib.AcadEntities.LayerDictionary.NewLayer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Dxflib.AcadEntities.LayerDictionary.ContainsLayer*
  commentId: Overload:Dxflib.AcadEntities.LayerDictionary.ContainsLayer
  name: ContainsLayer
  nameWithType: LayerDictionary.ContainsLayer
  fullName: Dxflib.AcadEntities.LayerDictionary.ContainsLayer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Dxflib.AcadEntities.LayerDictionary.GetLayer*
  commentId: Overload:Dxflib.AcadEntities.LayerDictionary.GetLayer
  name: GetLayer
  nameWithType: LayerDictionary.GetLayer
  fullName: Dxflib.AcadEntities.LayerDictionary.GetLayer
- uid: Dxflib.AcadEntities.Layer
  commentId: T:Dxflib.AcadEntities.Layer
  parent: Dxflib.AcadEntities
  name: Layer
  nameWithType: Layer
  fullName: Dxflib.AcadEntities.Layer
- uid: Dxflib.AcadEntities.LayerDictionary.UpdateDictionary*
  commentId: Overload:Dxflib.AcadEntities.LayerDictionary.UpdateDictionary
  name: UpdateDictionary
  nameWithType: LayerDictionary.UpdateDictionary
  fullName: Dxflib.AcadEntities.LayerDictionary.UpdateDictionary
- uid: System.Collections.Generic.IEnumerable{Dxflib.Entities.Entity}
  commentId: T:System.Collections.Generic.IEnumerable{Dxflib.Entities.Entity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Entity>
  nameWithType: IEnumerable<Entity>
  fullName: System.Collections.Generic.IEnumerable<Dxflib.Entities.Entity>
  nameWithType.vb: IEnumerable(Of Entity)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dxflib.Entities.Entity)
  name.vb: IEnumerable(Of Entity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dxflib.Entities.Entity
    name: Entity
    nameWithType: Entity
    fullName: Dxflib.Entities.Entity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dxflib.Entities.Entity
    name: Entity
    nameWithType: Entity
    fullName: Dxflib.Entities.Entity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Dxflib.AcadEntities.LayerDictionary.RemoveLayer*
  commentId: Overload:Dxflib.AcadEntities.LayerDictionary.RemoveLayer
  name: RemoveLayer
  nameWithType: LayerDictionary.RemoveLayer
  fullName: Dxflib.AcadEntities.LayerDictionary.RemoveLayer
