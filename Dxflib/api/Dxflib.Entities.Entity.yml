### YamlMime:ManagedReference
items:
- uid: Dxflib.Entities.Entity
  commentId: T:Dxflib.Entities.Entity
  id: Entity
  parent: Dxflib.Entities
  children:
  - Dxflib.Entities.Entity.EntityType
  - Dxflib.Entities.Entity.Handle
  - Dxflib.Entities.Entity.LayerChanged
  - Dxflib.Entities.Entity.LayerName
  - Dxflib.Entities.Entity.LayerNameBf
  - Dxflib.Entities.Entity.OnLayerChanged(Dxflib.Entities.LayerChangedHandlerArgs)
  langs:
  - csharp
  - vb
  name: Entity
  nameWithType: Entity
  fullName: Dxflib.Entities.Entity
  type: Class
  source:
    remote:
      path: Dxflib/Entities/Entity.cs
      branch: DocsFXTest
      repo: https://github.com/rena0157/Dxflib.git
    id: Entity
    path: Entities/Entity.cs
    startLine: 27
  assemblies:
  - Dxflib
  namespace: Dxflib.Entities
  summary: "\nThe Entity base class that all entities will be derived\n"
  example: []
  syntax:
    content: public abstract class Entity
    content.vb: Public MustInherit Class Entity
  inheritance:
  - System.Object
  derivedClasses:
  - Dxflib.Entities.Line
  - Dxflib.Entities.LwPolyLine
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Dxflib.Entities.Entity.EntityType
  commentId: F:Dxflib.Entities.Entity.EntityType
  id: EntityType
  parent: Dxflib.Entities.Entity
  langs:
  - csharp
  - vb
  name: EntityType
  nameWithType: Entity.EntityType
  fullName: Dxflib.Entities.Entity.EntityType
  type: Field
  source:
    remote:
      path: Dxflib/Entities/Entity.cs
      branch: DocsFXTest
      repo: https://github.com/rena0157/Dxflib.git
    id: EntityType
    path: Entities/Entity.cs
    startLine: 32
  assemblies:
  - Dxflib
  namespace: Dxflib.Entities
  summary: "\nThe entity type\n"
  example: []
  syntax:
    content: public EntityTypes EntityType
    return:
      type: Dxflib.Entities.EntityTypes
    content.vb: Public EntityType As EntityTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.Entities.Entity.LayerNameBf
  commentId: F:Dxflib.Entities.Entity.LayerNameBf
  id: LayerNameBf
  parent: Dxflib.Entities.Entity
  langs:
  - csharp
  - vb
  name: LayerNameBf
  nameWithType: Entity.LayerNameBf
  fullName: Dxflib.Entities.Entity.LayerNameBf
  type: Field
  source:
    remote:
      path: Dxflib/Entities/Entity.cs
      branch: DocsFXTest
      repo: https://github.com/rena0157/Dxflib.git
    id: LayerNameBf
    path: Entities/Entity.cs
    startLine: 37
  assemblies:
  - Dxflib
  namespace: Dxflib.Entities
  summary: "\nThe layer name private backing field\n"
  example: []
  syntax:
    content: protected string LayerNameBf
    return:
      type: System.String
    content.vb: Protected LayerNameBf As String
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Dxflib.Entities.Entity.Handle
  commentId: P:Dxflib.Entities.Entity.Handle
  id: Handle
  parent: Dxflib.Entities.Entity
  langs:
  - csharp
  - vb
  name: Handle
  nameWithType: Entity.Handle
  fullName: Dxflib.Entities.Entity.Handle
  type: Property
  source:
    remote:
      path: Dxflib/Entities/Entity.cs
      branch: DocsFXTest
      repo: https://github.com/rena0157/Dxflib.git
    id: Handle
    path: Entities/Entity.cs
    startLine: 42
  assemblies:
  - Dxflib
  namespace: Dxflib.Entities
  summary: "\nThe entity&apos;s Handel\n"
  example: []
  syntax:
    content: public string Handle { get; protected set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Handle As String
  overload: Dxflib.Entities.Entity.Handle*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Dxflib.Entities.Entity.LayerName
  commentId: P:Dxflib.Entities.Entity.LayerName
  id: LayerName
  parent: Dxflib.Entities.Entity
  langs:
  - csharp
  - vb
  name: LayerName
  nameWithType: Entity.LayerName
  fullName: Dxflib.Entities.Entity.LayerName
  type: Property
  source:
    remote:
      path: Dxflib/Entities/Entity.cs
      branch: DocsFXTest
      repo: https://github.com/rena0157/Dxflib.git
    id: LayerName
    path: Entities/Entity.cs
    startLine: 47
  assemblies:
  - Dxflib
  namespace: Dxflib.Entities
  summary: "\nThe entity&apos;s Layer name\n"
  example: []
  syntax:
    content: public string LayerName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LayerName As String
  overload: Dxflib.Entities.Entity.LayerName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Dxflib.Entities.Entity.LayerChanged
  commentId: E:Dxflib.Entities.Entity.LayerChanged
  id: LayerChanged
  parent: Dxflib.Entities.Entity
  langs:
  - csharp
  - vb
  name: LayerChanged
  nameWithType: Entity.LayerChanged
  fullName: Dxflib.Entities.Entity.LayerChanged
  type: Event
  source:
    remote:
      path: Dxflib/Entities/Entity.cs
      branch: DocsFXTest
      repo: https://github.com/rena0157/Dxflib.git
    id: LayerChanged
    path: Entities/Entity.cs
    startLine: 60
  assemblies:
  - Dxflib
  namespace: Dxflib.Entities
  summary: "\nPublic event for layer changes\n"
  example: []
  syntax:
    content: public event LayerChangedHandler LayerChanged
    return:
      type: Dxflib.Entities.LayerChangedHandler
    content.vb: Public Event LayerChanged As LayerChangedHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dxflib.Entities.Entity.OnLayerChanged(Dxflib.Entities.LayerChangedHandlerArgs)
  commentId: M:Dxflib.Entities.Entity.OnLayerChanged(Dxflib.Entities.LayerChangedHandlerArgs)
  id: OnLayerChanged(Dxflib.Entities.LayerChangedHandlerArgs)
  parent: Dxflib.Entities.Entity
  langs:
  - csharp
  - vb
  name: OnLayerChanged(LayerChangedHandlerArgs)
  nameWithType: Entity.OnLayerChanged(LayerChangedHandlerArgs)
  fullName: Dxflib.Entities.Entity.OnLayerChanged(Dxflib.Entities.LayerChangedHandlerArgs)
  type: Method
  source:
    remote:
      path: Dxflib/Entities/Entity.cs
      branch: DocsFXTest
      repo: https://github.com/rena0157/Dxflib.git
    id: OnLayerChanged
    path: Entities/Entity.cs
    startLine: 66
  assemblies:
  - Dxflib
  namespace: Dxflib.Entities
  summary: "\nThe OnLayerChanged Function that invokes the event\n"
  example: []
  syntax:
    content: protected virtual void OnLayerChanged(LayerChangedHandlerArgs args)
    parameters:
    - id: args
      type: Dxflib.Entities.LayerChangedHandlerArgs
      description: ''
    content.vb: Protected Overridable Sub OnLayerChanged(args As LayerChangedHandlerArgs)
  overload: Dxflib.Entities.Entity.OnLayerChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Dxflib.Entities
  commentId: N:Dxflib.Entities
  name: Dxflib.Entities
  nameWithType: Dxflib.Entities
  fullName: Dxflib.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dxflib.Entities.EntityTypes
  commentId: T:Dxflib.Entities.EntityTypes
  parent: Dxflib.Entities
  name: EntityTypes
  nameWithType: EntityTypes
  fullName: Dxflib.Entities.EntityTypes
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Dxflib.Entities.Entity.Handle*
  commentId: Overload:Dxflib.Entities.Entity.Handle
  name: Handle
  nameWithType: Entity.Handle
  fullName: Dxflib.Entities.Entity.Handle
- uid: Dxflib.Entities.Entity.LayerName*
  commentId: Overload:Dxflib.Entities.Entity.LayerName
  name: LayerName
  nameWithType: Entity.LayerName
  fullName: Dxflib.Entities.Entity.LayerName
- uid: Dxflib.Entities.LayerChangedHandler
  commentId: T:Dxflib.Entities.LayerChangedHandler
  parent: Dxflib.Entities
  name: LayerChangedHandler
  nameWithType: LayerChangedHandler
  fullName: Dxflib.Entities.LayerChangedHandler
- uid: Dxflib.Entities.Entity.OnLayerChanged*
  commentId: Overload:Dxflib.Entities.Entity.OnLayerChanged
  name: OnLayerChanged
  nameWithType: Entity.OnLayerChanged
  fullName: Dxflib.Entities.Entity.OnLayerChanged
- uid: Dxflib.Entities.LayerChangedHandlerArgs
  commentId: T:Dxflib.Entities.LayerChangedHandlerArgs
  parent: Dxflib.Entities
  name: LayerChangedHandlerArgs
  nameWithType: LayerChangedHandlerArgs
  fullName: Dxflib.Entities.LayerChangedHandlerArgs
